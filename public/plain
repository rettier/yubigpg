PUBKEY="ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAACAQC1/qOp3sDncerrKYEg3fkl42kpPJ5znC645QPzraxdUKo6gsi1/WaXYY49kdfHMfp4KZFTSFYQbnmYHO5d0RZUUTeel/85W+rUdSwXxTIxD8XUB3vYV1ocI7c582YsPVTrrPJ2c1uoGwCEuIgAnWoFLrw97qGk3yGN57WhtIqxPf8pmR8w+Qq1nMUCIsL6ztHIltzw5QvKwLhbMzJECifVMMhg+VM3iqYTJ8Dux5QraSKVBjbGGsVe1HirCo0AQ09XS5ex1oH1Hbn7M3glwmQ/N9Mq0O1Azb5+MrzfCo82fI8Zxlfwb7/tpIviNE/8oY1L1GmlRnW0qBn+prEK+dnEbnPHIaW2O3iNTuLVwJ/sVwkfLiw6tuGf6FWf8qepCp8ynpk98Z0CknpgvtqztNXpf7uoWJd1XRqKVliwHp2sb10ECpSlxDz4iymPNlw2tOQly7ZdBPJUt24BKPyRmuEJUOuQhhp90mIKZ23Aks/+YboN/gqkNwOXpUGD8v/heIij45EReDERBzKuaVMSVBoa9fRG2iomBsmybkbb/3yKzooi8IHfwiWVlNxtSTTRloADS8w5tjITMXcyZrNhdnAzAfOBWttNH/ZNuQ6YfRR5PeritP1RY9xdhTLOjZ4Mmd4gmktqZn2UZg6foIWB80hakfTsyA94qFPWYyPlv7qifQ== i@philipp.ninja"
echo "keyid: 0xD1680A47FBA066ED"
echo "pgp pub key: https://gpg.acc.si/gpg.pub"
echo "ssh public key:"
echo "$PUBKEY"
echo ""

if which xclip >/dev/null 2>&1 && test -n "$DISPLAY"; then
  echo "$PUBKEY" | xclip -selection c
fi

if which pbcopy >/dev/null 2>&1 ; then
  echo "$PUBKEY" | pbcopy
fi

yes_or_no() {
    while true; do
        read -p "$* [y/n]: " yn
        case $yn in
            [Yy]*) return 0  ;;  
            [Nn]*) echo "Aborted" ; return  1 ;;
        esac
    done
}

GET_SHELL=

setup_osx() {
    GET_SHELL='dscl . -read ${HOME} UserShell | cut -d" " -f2'
    INSTALL=
    
    if ! which gpg >/dev/null 2>&1 ; then
        INSTALL=1
    fi

    if [ -n "$INSTALL" ] ; then
        echo "Installing requirements..."
        brew install gpg2
    fi
}

setup_debian() {
    GET_SHELL='getent passwd $(id -un) | cut -d : -f 7'
    INSTALL=
    
    if [ $(dpkg-query -W -f='${Status}' scdaemon 2>/dev/null | grep -c "ok installed") -eq 0 ] ; then
        INSTALL=1
    fi

    if [ $(dpkg-query -W -f='${Status}' pcscd 2>/dev/null | grep -c "ok installed") -eq 0 ] ; then
        INSTALL=1
    fi

    if ! which gpg2 >/dev/null 2>&1 ; then
        INSTALL=1
    fi

    if ! which gpg-agent >/dev/null 2>&1 ; then
        INSTALL=1
    fi

    if [ -n "$INSTALL" ] ; then
        echo "Installing requirements..."
        sudo apt-get update >/dev/null 2>&1 
        sudo apt-get install -y scdaemon pcscd gnupg-agent gnupg2
    fi
}

final_debian() {
  return
}

final_osx() {
  # sometimes ssh stops working but signing still works, apparently this fixes it
  echo UPDATESTARTUPTTY | gpg-connect-agent >/dev/null 2>&1
}

setup_git() {
    # set up a fake home directory and a fake git command which uses this home directory
    # this is currently the only way i know how to override .gitconfig without changing the
    # current users config

    # unset all existing git env vars 
    unset "${!GIT_@}"

    # create fake git home directory
    GIT_HOME=$(mktemp -d 2>/dev/null || mktemp -d -t 'mytmpdir')
    GIT_PATH="$(which git)"
    export GIT_CONFIG_NOSYSTEM=1
    export PATH="${GIT_HOME}:${PATH}"
 
    # the env var is required so gpg does not search for .gnupg in the faked home, but uses the correct home
    export GNUPGHOME="${GNUPGHOME:-$HOME/.gnupg}" 

    cat > "${GIT_HOME}/git" <<-EOF
#!/bin/sh
HOME="${GIT_HOME}" "${GIT_PATH}" \$@
EOF
    chmod +x "${GIT_HOME}/git"

    cat > "${GIT_HOME}/.gitconfig" <<-EOF
[user]
	email = i@philipp.ninja
	name = Philipp Reitter
	signingkey = A9D06F483A83269E
[commit]
	gpgsign = true
[core]
	excludesfile = ${GIT_HOME}/.globalgitignore
	editor = vim
EOF

    # a decent global gitignore 
    cat > "${GIT_HOME}/.globalgitignore" <<EOF
*.pid
*.seed
*.pid.lock
npm-debug.log*
yarn-debug.log*
yarn-error.log*
.grunt
bower_components
node_modules/
jspm_packages/
.npm
__pycache__/
*.py[cod]
*$py.class
*.egg-info/
.installed.cfg
*.egg
.idea
*.bak
*.sw[op]
.DS_Store
.DS_Store?
._*
.Spotlight-V100
.Trashes
ehthumbs.db
Thumbs.db
EOF

}

start_gpg() {
    case "$(uname -s)" in
        Linux*)  setup_debian ;;
        Darwin*) setup_osx ;;
        *)       echo "Unknown OS, hoping requirements are met..." ;;
    esac

    export GPG_TTY="`tty`"

    # get the ssh socket path
    export SSH_AUTH_SOCK="`gpgconf --list-dirs agent-ssh-socket`"

    # older versions of gpgconf dont print the ssh socket for some reason
    # bruteforce search through some common paths
    if [ ! -S "$SSH_AUTH_SOCK" ] ; then
      export SSH_AUTH_SOCK="${HOME}/.gnupg/S.gpg-agent.ssh"
    fi

    if [ ! -S "$SSH_AUTH_SOCK" ] ; then
      export SSH_AUTH_SOCK="/run/user/$(id -u)/gnupg/S.gpg-agent.ssh"
    fi

    # no agent found (agent may not be running)
    # launch the agent and get the socket path from him  
    START_GPG="gpg-agent --daemon --enable-ssh-support --max-cache-ttl 300 --default-cache-ttl 300"
    eval $(${START_GPG} 2>/dev/null)

    if [ ! -S "$SSH_AUTH_SOCK" ] ; then
      (>&2 echo "gpg-agent seems to be running without ssh-support, restarting..." )
      gpgconf --kill gpg-agent
      eval $(${START_GPG} 2>/dev/null)
    fi

    # check if the key is already imported
    if ! gpg --list-keys --keyid-format LONG | grep D1680A47FBA066ED 2>&1 >/dev/null ; then
      echo "Importing my public key..."
      curl -s https://gpg.acc.si/pgp.pub | gpg --import >/dev/null 2>&1
    fi

    setup_git;

    case "$(uname -s)" in
        Linux*)  final_debian ;;
        Darwin*) final_osx ;;
        *)        ;;
    esac

    $(eval $GET_SHELL)
}

yes_or_no "Start gpg agent?" && start_gpg

